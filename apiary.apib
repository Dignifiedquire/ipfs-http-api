FORMAT: 1A

# ipfs

The API for interacting with IPFS nodes.

# Group add

TODO

# Group bitswap
A set of commands to manipulate the bitswap agent

## stat [GET /bitswap/stat]
Show some diagnostic information on the bitswap agent

+ Response 200 (application/json)

    + Attributes (object)
        + ProvideBufLen: 0 (number)
        + Wantlist (array, nullable)
        + Peers (array)
            - QmNjRVohhWBX31EoaAXkrj5mPF9vQNcTVvQgWHNwdxweCN (Multihash)
        + BlocksReceived: 0 (number)
        + DupBlksReceived: 0 (number)
        + DupDataReceived: 0 (number)

## unwant [GET /bitswap/unwant{?arg}]
Remove a given block from your wantlist

+ Parameters
    + arg (Multihash, required) - key to remove from your wantlist

+ Response 200 (application/json)


## wantlist [GET /bitswap/wantlist{?peer}]
Show blocks currently on the wantlist

+ Parameters
    + peer (Multihash, optional)

        specify which peer to show wantlist for (default self)

+ Response 200 (application/json)

    + Attributes (object)
        + Keys (array, optional)


# Group block
A plumbing command used to manipulate raw ipfs blocks.

## stat [GET /block/stat?{arg}]
Retrieve information on a raw ipfs block.

+ Parameters
    + arg (Multihash, required) - hash of the block to retrieve stats on

+ Response 200 (application/json)

    + Attributes (object)
        + Key: Qmb9Ru8XjPDAokAYE6rVzLwn3dEB4fxijgVMga1CcS95kJ (Multihash)
        + Size: 262158 (number) - the size of the block in bytes

## get [GET /block/get{?arg}]

Store data as a raw ipfs block.

+ Parameters
    + arg (Multihash, required) - hash of the block to be fetched

+ Response 200 (text/plain)

    + Body

        ```
        hello world
        ```

## put [GET /block/put]
TODO


# Group bootstrap

## add [GET /bootstrap/add]

+ Response 200 (text/json)

## list [GET /bootstrap/list]

+ Response 200 (text/plain)

## rm [GET /bootstrap/rm]

+ Response 200 (text/plain)

# Group cat

## cat [GET /cat]

+ Response 200 (text/plain)

# Group commands

## commands [GET /commands]

+ Response 200 (applications/json)

# Group config

## edit [GET /config/edit]

+ Response 200 (text/plain)

## replace [GET /config/replace]

+ Response 200 (text/plain)

## show [GET /config/show]

+ Response 200 (text/plain)

# Group daemon

# Group dht

## findpeer [GET /dht/findpeer]

+ Response 200 (text/plain)

## findprovs [GET /dht/findprovs]

+ Response 200 (text/plain)

## get [GET /dht/get]

+ Response 200 (text/plain)

## put [GET /dht/put]

+ Response 200 (text/plain)

## query [GET /dht/query]

+ Response 200 (text/plain)

# Group diag

## net [GET /diag/net]

+ Response 200 (text/plain)

## sys [GET /diag/sys]

+ Response 200 (text/plain)

# Group dns

## dns [GET /dns]

+ Response 200 (text/plain)

# Group file

## ls [GET /file/ls]

+ Response 200 (text/plain)

# Group get

## get [GET /get]

+ Response 200 (text/plain)

# Group id

## id [GET /id]

+ Response 200 (application/json)

    + Attributes (object)
        + ID (Multihash)
        + PublicKey (string)
        + Addresses (array)
            - (Multihash)
        + AgentVersion (string)
        + ProtocolVersion (string)

    + Body
        ```
        {
          "ID": "QmVnWL4CVWAaQHuuJQMgskDDyFwA1pqA2cC5ZTnQnB5yJt",
          "PublicKey": "CAASpgIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQD8SKPSPmQp3VJJmAaOsXnNU1Qqvz/TeBFO9VeoVDAD4gapupBBUZC5f2eTnWKXMiZt7m21xSzJ5i+G16uFCY1296maoas648C66XuxxwDpf4B/K/A2C6mjqQzKgrAZDiD9WS0oS2wsGlaEbikX/KXOw9PJOYThC4zvGHoQnYqmdXiXvNbtV9ZsjpkdU420kj4FQGcti7WvAukXX2yvVsxmnDLvpFFiNY96OkFAItZhvcROXB69davEL5Uthl90gR2d+nunBPTJeO/yZUk2mtcoB9Y0Q//qnLnGY2VlZkpVBjUpq2BLWUDu72BGRsxF+QU+MHqai5lJn73MZNQl3kOVAgMBAAE=",
          "Addresses": [
            "/ip4/127.0.0.1/tcp/4001/ipfs/QmVnWL4CVWAaQHuuJQMgskDDyFwA1pqA2cC5ZTnQnB5yJt",
            "/ip4/192.168.0.11/tcp/4001/ipfs/QmVnWL4CVWAaQHuuJQMgskDDyFwA1pqA2cC5ZTnQnB5yJt",
            "/ip6/::1/tcp/4001/ipfs/QmVnWL4CVWAaQHuuJQMgskDDyFwA1pqA2cC5ZTnQnB5yJt",
            "/ip6/fd67:d185:7678:b25b:3cd6:bb15:ff71:af88/tcp/4001/ipfs/QmVnWL4CVWAaQHuuJQMgskDDyFwA1pqA2cC5ZTnQnB5yJt",
            "/ip4/85.216.106.69/tcp/4001/ipfs/QmVnWL4CVWAaQHuuJQMgskDDyFwA1pqA2cC5ZTnQnB5yJt",
            "/ip4/85.216.106.69/tcp/60505/ipfs/QmVnWL4CVWAaQHuuJQMgskDDyFwA1pqA2cC5ZTnQnB5yJt",
            "/ip4/85.216.106.69/tcp/60505/ipfs/QmVnWL4CVWAaQHuuJQMgskDDyFwA1pqA2cC5ZTnQnB5yJt"
            ],
          "AgentVersion": "go-ipfs/0.3.9",
          "ProtocolVersion": "ipfs/0.1.0"
        }
        ```

# Group init

## init [GET /init]

+ Response 200 (text/plain)

# Group log

## level [GET /log/level]

+ Response 200 (text/plain)

## tail [GET /log/tail]

+ Response 200 (text/plain)

# Group ls

## ls [GET /ls]

+ Response 200 (text/plain)

# Group mount

+ Response 200 (text/plain)

# Group name

## publish [GET /name/publish]

+ Response 200 (text/plain)

## resolve [GET /name/resolve]

+ Response 200 (text/plain)

# Group object
## data [GET /object/data]

+ Response 200 (text/plain)

## get [GET /object/get]

+ Response 200 (text/plain)

## links [GET /object/links]

+ Response 200 (text/plain)

## new [GET /object/new]

+ Response 200 (text/plain)

## patch [GET /object/patch]

+ Response 200 (text/plain)

## put [GET /object/put]

+ Response 200 (text/plain)

## stat [GET /object/stat]

+ Response 200 (text/plain)

# Group pin
## add [GET /pin/add]

+ Response 200 (text/plain)

## ls [GET /pin/ls]

+ Response 200 (text/plain)

## rm [GET /pin/rm]

+ Response 200 (text/plain)

# Group ping

## ping [GET /ping]

# Group refs

## local [GET /refs/local]

+ Response 200 (text/plain)

# Group repo

## gc [GET /repo/gc]

+ Response 200 (text/plain)

# Group resolve

## resolve [GET /resolve]

# Group stats

## bw [GET /stats/bw]

+ Response 200 (text/plain)

# Group swarm
Swarm inspection tool.

## addrs [GET /swarm/addrs]
List known addresses. Useful for debugging.

+ Response 200 (application/json)

    + Attributes (object)
        - Addrs (SwarmAddrs)

## addrs local [GET /swarm/addrs/local]
List all local addresses.

+ Response 200 (application/json)

    + Attributes (object)
        - Strings (array)
            - "/ip4/127.0.0.1/tcp/4001" (MultiAddr)

## connect [GET /swarm/connect{?arg}]
Open a connection to the given address.

+ Parameters
    + arg (MultiAddr, required) - Address of the peer to connect to

+ Response 200 (text/plain)


## disconnect [GET /swarm/disconnect{?arg}]
Close the connection to a given address.

+ Parameters
    + arg (MultiAddr, required) - Address of the peer to disconnect from

+ Response 200 (text/plain)

## filters [GET /swarm/filters]
List out all currently applied filters. The subcommands can be used
to add or remove said filters. Filters are specified using the multiaddr-filter format:

**Example:**

```
/ip4/192.168.0.0/ipcidr/16
```
Where the above is equivalent to the standard CIDR:

```
192.168.0.0/16
```
Filters default to those specified under the `"Swarm.AddrFilters"` config key.

+ Response 200 (application/json)

    + Attributes (object)
        - Strings (array)
            - "/ip4/192.168.0.0/ipcidr/16" (MultiAddr)


## filters add [GET /swarm/filters/add{?arg}]
Add the given multiaddr to the filter list.

+ Parameters
    + arg (MultiAddr, required) - Address to add to the filter list

+ Response 200 (application/json)

## filters rm [GET /swarm/filters/rm{?arg}]
Remove the given multiaddr from the filter list.

+ Parameters
    + arg (MultiAddr, required) - Address to remove from the filter list

+ Response 200 (application/json)

## peers [GET /swarm/peers]
List the set of peers the node is connected to.

+ Response 200 (application/json)

    + Attributes (object)
        - Strings (array)
            - "/ip4/104.233.87.68/tcp/55125/ipfs/QmdAYL426boH1RRFR6JABaNT4JNfrEJV1coiPfKytpPVwP" (MultiAddr)

# Group tar
Utility functions for tar files in ipfs

## add [GET /tar/add]
Import a tar file into ipfs

+ Response 200 (text/plain)

## cat [GET /tar/cat]
Export a tar file from ipfs

+ Response 200 (text/plain)

# Group tour
This is a tour that takes you through various IPFS concepts,
features, and tools to make sure you get up to speed with
IPFS very quickly.

## tour [GET /tour{?arg}]

Start the tour

+ Parameters
    + arg (string, optional) - Topic id to go to

+ Response 200 (text/plain)

    + Body
        ```
        - * 0.0   Hello Mars
        -   0.1   Hello Mars
        -   0.2   About IPFS
        -   1.1   Filesystem
        -   1.2   Getting Files
        -   1.3   Adding Files
        -   1.4   Directories
        -   1.5   Distributed
        -   1.6   Getting Files
        -   2.0   Basics - init
        -   2.1   Basics - help
        -   2.2   Basics - update
        -   2.3   Basics - config
        ```

## list [GET /tour/list]
Show a list of all tour topics.

+ Response 200 (text/plain)

    + Body
        ```
        Tour 0.0 - Hello Mars
        ```


## next [GET /tour/next]
Show the next tour topic.

+ Response 200 (text/plain)

    + Body
        ```
        Tour 0.1 - Hello Mars
        ```

## restart [GET /tour/restart]
Restart the IPFS Tour

+ Response 200 (application/json)

# Group version
Show version details about the ipfs node.

## version [GET /version]

+ Response 200 (application/json)
    + Attributes (object)
        - Version: `0.3.9` (string)
        - Commit: b036b23a233a64faa6a456522b0f45763be70e64 (string)

# Data Structures

## Multihash (string)
An hash as defined [here](https://github.com/jbenet/multihash)

### Sample
QmNjRVohhWBX31EoaAXkrj5mPF9vQNcTVvQgWHNwdxweCN


## SwarmAddrs (object)
A list of swarm addresses.

### Sample
```
"QmNRCEwFMgCcbjNk5bFud9oqjJduvjBNbkiM8SuxuLh3GS": [
  "/ip4/127.0.0.1/tcp/4001",
  "/ip4/172.17.42.1/tcp/4001",
  "/ip4/192.168.2.3/tcp/4001",
  "/ip6/::1/tcp/4001"
],
"QmNRV7kyUxYaQ4KQxFXPYm8EfuzJbtGn1wSFenjXL6LD8y": [
  "/ip4/127.0.0.1/tcp/4001",
  "/ip4/172.17.42.1/tcp/4001",
  "/ip4/5.9.33.222/tcp/4001",
  "/ip6/2a01:4f8:161:124a::1337:cafe/tcp/4001",
  "/ip6/2a01:4f8:161:124a::2/tcp/4001",
  "/ip6/::1/tcp/4001",
  "/ip6/fcfc:762a:e12a:245d:8e5b:6a40:f65:acab/tcp/4001"
]
```


## MultiAddr (string)
A multiaddr as defined [here](https://github.com/jbenet/multiaddr).

### Sample
`/ip6/fcfc:762a:e12a:245d:8e5b:6a40:f65:acab/tcp/4001`
